import 'mocha'
import * as assert from 'assert'
import { schema } from './helper'

import * as path from 'path'
import { getConfig } from '../src/getConfig'

// This stub represents a JSON object that would normally be generated by running the GraphQL `introspectionQuery`.
const schemaJSON = {
  data: {
    stubbed: "schema"
  }
}

describe('getConfig', () => {
  beforeEach(() => {
    getConfig.existsSync = () => false
    getConfig.readFileSync = () => {
      throw new Error('Unexpected')
    }
    getConfig.buildGraphQLSchema = (data) => {
      assert.deepEqual(data, schemaJSON.data)
      return schema
    }
    getConfig.parseGraphQLConfig = () => {
      throw new Error('Unexpected')
    }
    getConfig.resolveSchema = () => {
      throw new Error('Unexpected')
    }
  })

  describe('concerning schema', () => {
    it('defaults to data/schema.json', () => {
      getConfig.existsSync = (path) => {
        assert.equal(path, 'data/schema.json')
        return true
      }

      getConfig.resolveSchema = ({ file }) => {
        assert.equal(file, path.resolve('data/schema.json'))
        return Promise.resolve(schemaJSON)
      }

      return getConfig().then(config => {
        assert.equal(config.interfaceName, null)
        assert.equal(config.schema, schema)
      })
    })

    it('uses the file specified in package.json', () => {
      getConfig.readFileSync = (path => {
        assert.equal(path, 'another/root/package.json')
        return JSON.stringify({ graphql: { tsInterfaceName: 'OtherProps' } })
      }) as any

      getConfig.parseGraphQLConfig = (root) => {
        assert.equal(root, 'another/root')
        return { file: 'path/from/package/schema.json' }
      }

      getConfig.resolveSchema = ({ file }) => {
        assert.equal(file, path.resolve('another/root', 'path/from/package/schema.json'))
        return Promise.resolve(schemaJSON)
      }

      return getConfig({ rootPath: 'another/root' }).then(config => {
        assert.equal(config.interfaceName, 'OtherProps')
        assert.equal(config.schema, schema)
      })
    })

    it('uses the explicitly specified path', () => {
      getConfig.resolveSchema = ({ file }) => {
        assert.equal(file, path.resolve('another/path/schema.json'))
        return Promise.resolve(schemaJSON)
      }

      return getConfig({ schemaPath: 'another/path/schema.json' }).then(config => {
        assert.equal(config.interfaceName, null)
        assert.equal(config.schema, schema)
      })
    })
  })
})
